datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator cli {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  statistics    Statistics?
  guesses       Guesses?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// custom models for EDEN Heardle below

model Statistics {
  id            String @id @default(cuid())
  gamesPlayed   Int    @default(0)
  gamesWon      Int    @default(0)
  currentStreak Int    @default(0)
  maxStreak     Int    @default(0)
  accuracy      Int    @default(0)
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String @unique // relation scalar field (used in the `@relation` attribute above)
}

model Guesses {
  id     String        @id @default(cuid())
  songs  GuessedSong[]
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String        @unique // relation scalar field (used in the `@relation` attribute above)
}

model GuessedSong {
  id            String  @id @default(cuid())
  name          String
  album         String?
  cover         String
  correctStatus String
  guessList     Guesses @relation(fields: [guessListId], references: [id], onDelete: Cascade)
  guessListId   String // relation scalar field (used in the `@relation` attribute above)
}

model DailySong {
  id         String    @id @default(cuid())
  name       String
  album      String?
  cover      String
  link       String
  startTime  Int?
  heardleDay Int?
  nextReset  DateTime?
}

model Song {
  id    String  @id @default(cuid())
  name  String
  album String?
  cover String
  link  String
}
